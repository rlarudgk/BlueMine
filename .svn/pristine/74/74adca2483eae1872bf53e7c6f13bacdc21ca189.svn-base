package kr.or.ddit.project.alarm.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import kr.or.ddit.member.vo.MemberVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class EchoHandler extends TextWebSocketHandler{

	//로그인 한 전체
	List<WebSocketSession> sessions = new ArrayList<WebSocketSession>();
	
	// 로그인중인 개별유저
	Map<String, WebSocketSession> users = new ConcurrentHashMap<String, WebSocketSession>();
	
	// 클라이언트가 서버로 연결시
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		sessions.add(session);

		String senderId = getMemberMail(session); // 접속한 유저의 http세션을 조회하여 id를 얻는 함수(보내는 사람)
		if(senderId!=null) {	// 로그인 값이 있는 경우만
			log(senderId + " 연결 됨");
			users.put(senderId, session);   // 로그인중 개별유저 저장
			log("users : "+users);
		}
	}
	
	// 클라이언트가 Data 전송 시
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		
		String senderId = getMemberId(session); //
		String sessionId = getMemberMail(session); //
		String msg = message.getPayload();
		log("msg : "+ msg);
		
		if(msg != null) {
			String[] strs = msg.split(",");
			if(strs[1].equals("me")) {
				TextMessage tmsg = new TextMessage(strs[0]);
				users.get(sessionId).sendMessage(tmsg);
			}else {
				if(strs != null) {
					String target = strs[0]; 
					String cont = strs[1]; 
					String sender = senderId; 
					
//					log("target"+ target);
//					log("cont"+cont);
//					System.out.println(users);
					
					for(String str : target.split("!")) {
//						int i = 0;
//						String[] none = str[i];
						log("str.length : "+strs.length);
						int leng = strs.length-1;
						int alNo =  Integer.parseInt(strs[2])-leng; 
						
						if(str!=null) {
//							log("str"+str);
							WebSocketSession targetSession = users.get(str);  // 메시지를 받을 세션 조회
							if(targetSession!=null) {
								TextMessage tmpMsg = new TextMessage(sender+","+cont+","+alNo);
								targetSession.sendMessage(tmpMsg);
							}
						}
					}
				}
				
			}
		}
	}
	
	@Override
	// 연결 해제될 때
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		String senderId = getMemberId(session);
		if(senderId!=null) {	// 로그인 값이 있는 경우만
			log(senderId + " 연결 종료됨");
			users.remove(senderId);
			sessions.remove(session);
		}
	}
	
	// 에러 발생시
	@Override
	public void handleTransportError(WebSocketSession session, Throwable exception) throws Exception {
		log(session.getId() + " 익셉션 발생: " + exception.getMessage());

	}
	
	// 로그 메시지
	private void log(String logmsg) {
		System.out.println(new Date() + " : " + logmsg);
	}
	
	// 웹소켓에 이름가져오기
    // 접속한 유저의 http세션을 조회하여 id를 얻는 함수
	private String getMemberId(WebSocketSession session) {
		Map<String, Object> httpSession = session.getAttributes();
		MemberVO mv = (MemberVO) httpSession.get("authMember"); // 세션에 저장된 memName 기준 조회
		return mv==null? null: mv.getMemName();
	}
	// 웹소켓에 메일가져오기
	private String getMemberMail(WebSocketSession session) {
		Map<String, Object> httpSession = session.getAttributes();
		MemberVO mv = (MemberVO) httpSession.get("authMember"); // 세션에 저장된 memEmail 기준 조회
		return mv==null? null: mv.getMemEmail();
	}
}
package kr.or.ddit.project.work.controller;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.enumpkg.ServiceResult;
import kr.or.ddit.project.home.service.ProjectService;
import kr.or.ddit.project.home.vo.ParticipateVO;
import kr.or.ddit.project.home.vo.ProjectVO;
import kr.or.ddit.project.work.dao.WorkDAO;
import kr.or.ddit.project.work.service.WorkService;
import kr.or.ddit.project.work.vo.WorkChargerVO;
import kr.or.ddit.project.work.vo.WorkCommVO;
import kr.or.ddit.project.work.vo.WorkVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/project")
public class WorkController {
	
	@Inject
	private ProjectService service;
	@Inject
	private WorkService workService;
	@Inject
	private WorkDAO workDAO;
	
	@GetMapping("/myWork")
	public String myWorkList() {
		return "pms/mywork/workList";
	}
	
	@GetMapping("/project/workList/{proCode}")
	public String projectWorkList(
			@PathVariable String proCode
			, Model model
			) {
		ProjectVO project = service.retrieveProject(proCode);
		model.addAttribute("project", project);
		return "project/work/workList";
	}
	
	
	
	// 작업 전체 목록 가져오기
	@ResponseBody
	@GetMapping("/project/workListView/{proCode}")
	public List<WorkVO> projectWorkList(
			@PathVariable String proCode
			){
		List<WorkVO> workList = workService.retrieveWorkList(proCode);
		return workList;
	}
	
	// 작업 나에게 담당된 작업 목록 가져오기
	@ResponseBody
	@PostMapping("/project/myWorkListView")
	public List<WorkVO> projectMyWorkList(
			@RequestBody WorkVO work			
			){
		log.info("work222 {}",work);
		List<WorkVO> workList = workService.retrieveMyWorkList(work);
		return workList;
	}
	
	// 작업 Detail
	@ResponseBody
	@PostMapping("/project/workDetail")
	public WorkVO projectWorkDetail(
			@RequestBody WorkVO work
			) {
		WorkVO workVO = workService.retrieveWorkDetail(work);
		return workVO;
	}
	
	// 작업 등록하기
	@ResponseBody
	@PostMapping("/project/workInsert")
	public int projectWorkInsert(
			@ModelAttribute("work") WorkVO work
			) {
		if(work.getWorkPntNo() == null) {
			work.setWorkPntNo(0);
		}
		log.info("work222 {}",work);
		String resultStr = "0";
		ServiceResult result = workService.createWork(work);
		switch(result) {
		case OK:
			log.info("OK");
			resultStr = "1";
			break;
		case FAIL:
			log.info("FAIL");
			resultStr = "0";
			break;
		}
		WorkVO workNo1 = workDAO.selectWorkLastNo();
		int workNo = (workNo1.getWorkNo()-1);
		return workNo;
	}
	
	// 작업 담당자 등록하기
	@ResponseBody
	@PostMapping("/project/workChargerInsert")
	public String projectWorkChargerInsert(
			@RequestBody List<WorkChargerVO> list
			) {
		
		String resultStr = "0";
		
		log.info("map22: {}",list);
		WorkVO work = new WorkVO();
		work.setWorkChargerList(list);
		ServiceResult result = workService.createWorkCharger(work);
		
		switch(result) {
		case OK:
			log.info("OK");
			resultStr = "1";
			break;
		case FAIL:
			log.info("FAIL");
			resultStr = "0";
			break;
		}
		
		return resultStr; 
	}
	
	// 작업 삭제 ( 해당 담당자도 자동 삭제 )
	@ResponseBody
	@PostMapping("/project/workDelete")
	public String projectWorkDelete(
			@RequestBody List<WorkVO> workVOList
			) {
		List<WorkVO> workVOList2 = workVOList;
		log.info("insooo:{}",workVOList);
		String resultStr = "0";
		ServiceResult result = workService.deleteWorkCharger(workVOList);
		log.info("insooo2:{}",result);
		switch(result) {
		case OK:
			/* ServiceResult result2 = workService.deleteWork(workVOList2); */
			resultStr = "1";
			break;
		case FAIL:
			log.info("FAIL");
			resultStr = "0";
			break;
		}
		
		return resultStr;
	}
	
	// 현재 작업 하위작업 목록 조회
	@ResponseBody
	@PostMapping("/project/workDownList")
	public List<List<WorkVO>> projectDownWorkList(
			@RequestBody List<WorkVO> workVOList
			){ 
		log.info("workVOLis232323t{}",workVOList);
		List<List<WorkVO>> resultWorkVOList = workService.retrieveDownWorkList(workVOList);
		return resultWorkVOList;
	}
	
	// 작업 수정
	@ResponseBody
	@PostMapping("/project/workUpdate")
	public String projectUpdate(
			@RequestBody WorkVO work
			) {
		log.info("work2222{}", work);
		int result = workService.modifyWorkAndWorkCharger(work);
		
		if(result>0) {		
			return "y";
		}else {
			return "n";
		}
	}
	
	// 작업 댓글 등록
	@ResponseBody
	@PostMapping(value="/project/workCommInsert", produces="application/json;charset=utf-8")
	public int projectWorkCommInsert(
			@ModelAttribute WorkCommVO workComm
			) {
		log.info("workCommInsert {}",workComm);
		String resultStr = "0";
		Integer workNo = workComm.getWorkNo();
		ServiceResult result = workService.createWorkComm(workComm);
		switch(result) {
		case OK:
			resultStr = "1";
			break;
		case FAIL:
			resultStr = "0";
			break;
		}
		return workNo;
	}
	
	// 작업 목록
	@ResponseBody
	@PostMapping(value="/project/workCommList", produces="application/json;charset=utf-8")
	public List<WorkCommVO> projectWorkCommList(
			@RequestBody WorkCommVO workComm
			) {
		log.info("workCommProcode {}", workComm);
		List<WorkCommVO> workCommList = workService.retrieveWorkCommList(workComm);
		return workCommList;
	}
	
}



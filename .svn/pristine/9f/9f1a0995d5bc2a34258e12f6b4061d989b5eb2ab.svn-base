package kr.or.ddit.member.dao;

import java.util.List;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

import kr.or.ddit.member.vo.MemberVO;
import kr.or.ddit.vo.PagingVO;

/**
 * 회원관리(CRUD)를 위한 Persistence Layer
 *
 */
@Mapper
public interface MemberDAO{
	public int selectTotalRecord(PagingVO<MemberVO> pagingVO);

	/**
	 * 회원 신규 등록
	 * @param member
	 * @return 등록된 레코드 수 (rowcnt) > 0 : 성공, <= 0 : 실패 
	 */
	public int insertMember(MemberVO member);
	
	/**
	 * 회원 목록 조회
	 * @param pagingVO TODO
	 * @return size == 0 인 경우, 조건에 맞는 레코드 없음. 
	 */
	public List<MemberVO> selectMemberList(PagingVO<MemberVO> pagingVO);
	
	/** 회원 상세 조회
	 * @param memEmail
	 * @return 조건에 맞는 레코드 없는 경우, null 반환
	 */
	public MemberVO selectMember(@Param("memEmail") String memEmail);
	
	/**
	 * 회원 정보 수정
	 * @param member
	 * @return 수정된 레코드 수(rowcnt) > 0 : 성공, <= 0 : 실패  
	 */
	public int updateMember(MemberVO member);
	
	/**
	 * 회원 정보 삭제(?)
	 * @param memEmail
	 * @return 삭제된 레코드 수(rowcnt) > 0 : 성공, <= 0 : 실패  
	 */
	public int deleteMember(String memEmail);
	
	/**
	 * 이메일 난수 저장
	 * @param member
	 * @return 수정된 레코드 수(rowcnt) > 0 : 성공, <= 0 : 실패
	 * @throws Exception
	 */
	public int updateMailKey(MemberVO member) throws Exception;
	
	/**
	 * 이메일 인증 여부 업데이트
	 * @param member
	 * @return 수정된 레코드 수(rowcnt) > 0 : 성공, <= 0 : 실패
	 * @throws Exception
	 */
	public int updateMailAuth(MemberVO member) throws Exception;

	/**
	 * 이메일 중복확인
	 * @param memEmail
	 * @return cnt > 0 : 중복 , 0 = 사용가능
	 */
	public int emailCheck(String memEmail);
}


